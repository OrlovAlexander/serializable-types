(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"./docs_src/API.mdx":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a,m=(a=t("./node_modules/react/index.js"))&&a.__esModule?a:{default:a},p=t("./node_modules/@mdx-js/tag/dist/index.js");function o(e,n){if(null==e)return{};var t,a,m=function(e,n){if(null==e)return{};var t,a,m={},p=Object.keys(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||(m[t]=e[t]);return m}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(m[t]=e[t])}return m}n.default=function(e){var n=e.components;o(e,["components"]);return m.default.createElement(p.MDXTag,{name:"wrapper",components:n},m.default.createElement(p.MDXTag,{name:"h1",components:n,props:{id:"api"}},"API"),m.default.createElement(p.MDXTag,{name:"p",components:n},"The ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types")," namespace exported by this module has two kinds of objects on it: ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),"s and functions which return ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),"s."),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," is an object that represents a given type within JavaScript, that has methods on it that can be used to work with values of that type."),m.default.createElement(p.MDXTag,{name:"p",components:n},"Every ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," has this shape:"),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},'interface TypeDef {\n  // Description of the type, eg `Buffer` or `Array<number>`\n  description: string;\n\n  // Description of the type this serializes to, eg `{ $type: "boolean", $value: boolean }`\n  serializedDescription: string;\n\n  // Check if a given value is of this type. Returns true if it\'s this type, false otherwise.\n  check(val: any): boolean;\n\n  // Serialize the given value so that it can be encoded as JSON.\n  // If the given value is not of this type, an error will be thrown.\n  serialize(val: any): Object;\n\n  // Check if a given object can be deserialized to this type. True if it can, false otherwise.\n  checkSerialized(serialized: Object): boolean;\n\n  // Deserialize the given object into this type.\n  // If the given object cannot be deserialized into this type, an error will be thrown.\n  deserialize(serialized: Object): any;\n\n  // Assert that a given value is of this type. Like `check`, but it throws an error if the value is not of this type.\n  assert(val: any): void;\n}\n')),m.default.createElement(p.MDXTag,{name:"p",components:n},"Here is a list of all the ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),"s:"),m.default.createElement(p.MDXTag,{name:"ul",components:n},m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.boolean")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Buffer")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Date")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Element")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Error")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.false")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Function")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.integer")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.NaN")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.null")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.number")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.RegExp")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.string")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Symbol")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.true")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Int8Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Uint8Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Uint8ClampedArray")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Int16Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Uint16Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Int32Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Uint32Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Float32Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.Float64Array")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.undefined")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.URL"))),m.default.createElement(p.MDXTag,{name:"p",components:n},"And here is a list of all the functions which return ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),"s:"),m.default.createElement(p.MDXTag,{name:"ul",components:n},m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.array(memberTypeDef)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.exactString(string)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.intersection(...memberTypeDefs)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.map(keyTypeDef, valueTypeDef)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.maybe(typeDef)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.object(typeDefObjectMap)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.objectMap(valueTypeDef, keyTypeDef)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.set(memberTypeDef)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.shape(typeDefObjectMap)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.tuple(...memberTypeDefs)")),m.default.createElement(p.MDXTag,{name:"li",components:n,parentName:"ul"},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"types.union(...memberTypeDefs)"))),m.default.createElement(p.MDXTag,{name:"p",components:n},"Both the ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),"s and the functions which return ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),"s are documented below."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesboolean"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.boolean")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents boolean values, either ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"true")," or ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"false"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesbuffer"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Buffer")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://nodejs.org/api/buffer.html#buffer_buffer"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"Buffer")),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesdate"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Date")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"Date")),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typeselement"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Element")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents an ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"Element")),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typeserror"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Error")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents an ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"Error")),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesfalse"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.false")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the value ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"false"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesfunction"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Function")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Function"),". Note that functions cannot be (de)serialized."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesinteger"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.integer")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents integers."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesnan"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.NaN")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the value ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"NaN"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesnull"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.null")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the value ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"null"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesnumber"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.number")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents all numbers except ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"NaN"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesregexp"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.RegExp")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"RegExp")),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesstring"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.string")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents any string value."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typessymbol"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Symbol")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"Symbol")),". Note: only shared Symbols from the global Symbol registry can be (de)serialized."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typestrue"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.true")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the value ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"true"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesint8array-typesuint8array-typesuint8clampedarray-typesint16array-typesuint16array-typesint32array-typesuint32array-typesfloat32array-typesfloat64array"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Int8Array"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Uint8Array"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Uint8ClampedArray"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Int16Array"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Uint16Array"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Int32Array"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Uint32Array"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Float32Array"),", ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.Float64Array")),m.default.createElement(p.MDXTag,{name:"p",components:n},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),"s which represent ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays"}},"typed array views"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesundefined"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.undefined")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the value ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"undefined"),"."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesurl"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.URL")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a WHATWG ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/URL"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"URL"))," object."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesarraymembertypedef"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.array(memberTypeDef)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a homogenous Array of the given type; for example, ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.array(types.boolean)")," represents an Array of unbounded length containing only booleans. This is like ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Array<boolean>")," in Flow/TypeScript."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesexactstringstring"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.exactString(string)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents an exact string. For example, ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'types.exactString("foo")'),". This is most useful when combined with ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.union")," to simulate enums; for example, ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'types.union(types.exactString("GET"), types.exactString("POST"))'),", which is like ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'"GET" | "POST"')," in Flow/TypeScript."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesintersectionmembertypedefs"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.intersection(...memberTypeDefs)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the intersection of the given ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),'s. It\'s kind of like a logical "AND". For example:'),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"types.intersection(\n  types.object({\n    foo: types.number,\n  }),\n  types.object({\n    bar: types.number,\n  })\n);\n")),m.default.createElement(p.MDXTag,{name:"p",components:n},"This is like ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"{ foo: number } & { bar: number }")," in Flow/TypeScript."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesmapkeytypedef-valuetypedef"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.map(keyTypeDef, valueTypeDef)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"Map")),", containing the given key and value types. For example, ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.map(types.string, types.Buffer)"),". This is like ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Map<string, Buffer>")," in Flow/TypeScript."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesmaybetypedef"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.maybe(typeDef)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the union between the given ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," and ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"undefined"),". For example: ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.maybe(types.string)"),". This is similar to ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"?string")," in Flow and ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"string?")," in TypeScript."),m.default.createElement(p.MDXTag,{name:"p",components:n},"This is most useful in object types for representing optional properties, eg:"),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"types.object({\n  size: types.number,\n  data: types.maybe(types.Buffer),\n});\n")),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesobjecttypedefobjectmap"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.object(typeDefObjectMap)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents an Object whose properties are typed by the passed ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"typeDefObjectMap"),". For example:"),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"types.object({\n  size: types.number,\n  data: types.union(types.string, types.Buffer),\n  encoding: types.maybe(types.string),\n});\n\n// This is similar to the following in Flow/TypeScript:\n// {\n//   size: number,\n//   data: string | Buffer,\n//   encoding?: string\n// }\n")),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesobjectmapvaluetypedef-keytypedef"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.objectMap(valueTypeDef, keyTypeDef?)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents an Object whose keys are arbitrary and whose values are the same. For example:"),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"types.objectMap(types.number, types.string);\n// This is similar to `{ [string]: number }` in Flow/TypeScript.\n")),m.default.createElement(p.MDXTag,{name:"p",components:n},"Note that the value ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," is the first argument and the key ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," is the second argument, which may be somewhat unintuitive. This is because the key ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," is optional and defaults to ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.union(types.string, types.Symbol)"),"."),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"types.objectMap(types.number);\n// This is similar to `{ [string | Symbol]: number }` in Flow/TypeScript.\n")),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typessetmembertypedef"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.set(memberTypeDef)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents a ",m.default.createElement(p.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"Set")),", containing the given member type. For example, ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.set(types.string)"),". This is like ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Set<string>")," in Flow/TypeScript."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesshapetypedefobjectmap"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.shape(typeDefObjectMap)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which is the same as ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.object")," but all of the object properties in the returned ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," are wrapped with ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"types.maybe"),". This is similar to ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"$Shape")," in Flow, and is useful for config options, React Props, etc."),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typestuplemembertypedefs"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.tuple(...memberTypeDefs)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents an Array of fixed length with typed values at each index. For example:"),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"types.tuple(types.string, types.number);\n// This is like `[string, number]` in Flow/TypeScript.\n")),m.default.createElement(p.MDXTag,{name:"h2",components:n,props:{id:"typesunionmembertypedefs"}},m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"types.union(...memberTypeDefs)")),m.default.createElement(p.MDXTag,{name:"p",components:n},"A function which returns a ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef")," which represents the union of the given ",m.default.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeDef"),'s. It kind of works like a logical "OR". For example:'),m.default.createElement(p.MDXTag,{name:"pre",components:n},m.default.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"types.union(types.string, types.number);\n// This is like `string | number` in Flow/TypeScript.\n")))}}}]);